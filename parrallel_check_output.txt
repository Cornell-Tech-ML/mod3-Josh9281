MAP

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map,
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (175)
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (175)
-------------------------------------------------------------------------------------------|loop #ID
    def _map(                                                                              |
        out: Storage,                                                                      |
        out_shape: Shape,                                                                  |
        out_strides: Strides,                                                              |
        in_storage: Storage,                                                               |
        in_shape: Shape,                                                                   |
        in_strides: Strides,                                                               |
    ) -> None:                                                                             |
        # TODO: Implement for Task 3.1.                                                    |
        if list(out_shape) == list(in_shape) and list(out_strides) == list(in_strides):    |
            for i in prange(len(out)):-----------------------------------------------------| #2
                out[i] = fn(in_storage[i])                                                 |
            return                                                                         |
        else:                                                                              |
            for i in prange(len(out)):-----------------------------------------------------| #3
                out_index = np.zeros(------------------------------------------------------| #0
                    MAX_DIMS, dtype=np.int32                                               |
                )  # Ensure int32 for indices                                              |
                in_index = np.zeros(MAX_DIMS, dtype=np.int32)------------------------------| #1
                to_index(i, out_shape, out_index)                                          |
                broadcast_index(out_index, out_shape, in_shape, in_index)                  |
                out_pos = index_to_position(out_index, out_strides)                        |
                in_pos = int(                                                              |
                    index_to_position(in_index, in_strides)                                |
                )  # Explicitly cast to int                                                |
                out[out_pos] = fn(in_storage[in_pos])                                      |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...

Fused loop summary:
+--0 has the following loops fused into it:
   +--1 (fused)
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #2, #3, #0).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--3 is a parallel loop
   +--0 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--3 (parallel)
   +--0 (parallel)
   +--1 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--3 (parallel)
   +--0 (serial, fused with loop(s): 1)



Parallel region 0 (loop #3) had 1 loop(s) fused and 1 loop(s) serialized as part
 of the larger parallel loop (#3).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (190) is hoisted
out of the parallel loop labelled #3 (it will be performed before the loop is
executed and reused inside the loop):
   Allocation:: out_index = np.zeros(
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (193) is hoisted
out of the parallel loop labelled #3 (it will be performed before the loop is
executed and reused inside the loop):
   Allocation:: in_index = np.zeros(MAX_DIMS, dtype=np.int32)
    - numpy.empty() is used for the allocation.
None
ZIP

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip,
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (228)
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (228)
---------------------------------------------------------------------------|loop #ID
    def _zip(                                                              |
        out: Storage,                                                      |
        out_shape: Shape,                                                  |
        out_strides: Strides,                                              |
        a_storage: Storage,                                                |
        a_shape: Shape,                                                    |
        a_strides: Strides,                                                |
        b_storage: Storage,                                                |
        b_shape: Shape,                                                    |
        b_strides: Strides,                                                |
    ) -> None:                                                             |
        # TODO: Implement for Task 3.1.                                    |
        if list(out_shape) == list(a_shape) == list(b_shape) and list(     |
            out_strides                                                    |
        ) == list(a_strides) == list(b_strides):                           |
            for i in prange(len(out)):-------------------------------------| #7
                out[i] = fn(a_storage[i], b_storage[i])                    |
            return                                                         |
        else:                                                              |
            for i in prange(len(out)):-------------------------------------| #8
                out_index = np.zeros(MAX_DIMS, np.int32)-------------------| #4
                a_index = np.zeros(MAX_DIMS, np.int32)---------------------| #5
                b_index = np.zeros(MAX_DIMS, np.int32)---------------------| #6
                to_index(i, out_shape, out_index)                          |
                broadcast_index(out_index, out_shape, a_shape, a_index)    |
                broadcast_index(out_index, out_shape, b_shape, b_index)    |
                out_pos = index_to_position(out_index, out_strides)        |
                a_pos = index_to_position(a_index, a_strides)              |
                b_pos = index_to_position(b_index, b_strides)              |
                out[out_pos] = fn(a_storage[a_pos], b_storage[b_pos])      |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...

Fused loop summary:
+--4 has the following loops fused into it:
   +--5 (fused)
   +--6 (fused)
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #7, #8, #4).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--8 is a parallel loop
   +--4 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--4 (parallel)
   +--5 (parallel)
   +--6 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--4 (serial, fused with loop(s): 5, 6)



Parallel region 0 (loop #8) had 2 loop(s) fused and 1 loop(s) serialized as part
 of the larger parallel loop (#8).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (248) is hoisted
out of the parallel loop labelled #8 (it will be performed before the loop is
executed and reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (249) is hoisted
out of the parallel loop labelled #8 (it will be performed before the loop is
executed and reused inside the loop):
   Allocation:: a_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (250) is hoisted
out of the parallel loop labelled #8 (it will be performed before the loop is
executed and reused inside the loop):
   Allocation:: b_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
REDUCE

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce,
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (283)
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (283)
------------------------------------------------------------------------------------|loop #ID
    def _reduce(                                                                    |
        out: Storage,                                                               |
        out_shape: Shape,                                                           |
        out_strides: Strides,                                                       |
        a_storage: Storage,                                                         |
        a_shape: Shape,                                                             |
        a_strides: Strides,                                                         |
        reduce_dim: int,                                                            |
    ) -> None:                                                                      |
        # TODO: Implement for Task 3.1.                                             |
        for i in prange(len(out)):--------------------------------------------------| #10
            out_index = np.zeros(MAX_DIMS, np.int32)--------------------------------| #9
            to_index(i, out_shape, out_index)                                       |
            o_index = index_to_position(out_index, out_strides)                     |
                                                                                    |
            base_a_pos = 0                                                          |
            for dim, stride in enumerate(a_strides):                                |
                base_a_pos += out_index[dim] * stride                               |
                                                                                    |
            original_value = out_index[                                             |
                reduce_dim                                                          |
            ]  # Store the original value of the reduce_dim                         |
            for j in range(a_shape[reduce_dim]):                                    |
                # Temporarily modify the reduce_dim directly in `out_index`         |
                out_index[reduce_dim] = j                                           |
                a_pos = (                                                           |
                    base_a_pos + j * a_strides[reduce_dim]                          |
                )  # Incrementally calculate position                               |
                reduced_value = fn(float(a_storage[a_pos]), float(out[o_index]))    |
                out[o_index] = reduced_value                                        |
            out_index[reduce_dim] = (                                               |
                original_value  # Restore the original value of reduce_dim          |
            )                                                                       |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #10, #9).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--10 is a parallel loop
   +--9 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--10 (parallel)
   +--9 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--10 (parallel)
   +--9 (serial)



Parallel region 0 (loop #10) had 0 loop(s) fused and 1 loop(s) serialized as
part of the larger parallel loop (#10).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (294) is hoisted
out of the parallel loop labelled #10 (it will be performed before the loop is
executed and reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY

================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply,
/Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (320)
================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, /Users/josh9281/Downloads/mod3-Josh9281/minitorch/fast_ops.py (320)
--------------------------------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                                                |
    out: Storage,                                                                           |
    out_shape: Shape,                                                                       |
    out_strides: Strides,                                                                   |
    a_storage: Storage,                                                                     |
    a_shape: Shape,                                                                         |
    a_strides: Strides,                                                                     |
    b_storage: Storage,                                                                     |
    b_shape: Shape,                                                                         |
    b_strides: Strides,                                                                     |
) -> None:                                                                                  |
    """NUMBA tensor matrix multiply function.                                               |
                                                                                            |
    Should work for any tensor shapes that broadcast as long as                             |
                                                                                            |
    ```                                                                                     |
    assert a_shape[-1] == b_shape[-2]                                                       |
    ```                                                                                     |
                                                                                            |
    Optimizations:                                                                          |
                                                                                            |
    * Outer loop in parallel                                                                |
    * No index buffers or function calls                                                    |
    * Inner loop should have no global writes, 1 multiply.                                  |
                                                                                            |
                                                                                            |
    Args:                                                                                   |
    ----                                                                                    |
        out (Storage): storage for `out` tensor                                             |
        out_shape (Shape): shape for `out` tensor                                           |
        out_strides (Strides): strides for `out` tensor                                     |
        a_storage (Storage): storage for `a` tensor                                         |
        a_shape (Shape): shape for `a` tensor                                               |
        a_strides (Strides): strides for `a` tensor                                         |
        b_storage (Storage): storage for `b` tensor                                         |
        b_shape (Shape): shape for `b` tensor                                               |
        b_strides (Strides): strides for `b` tensor                                         |
                                                                                            |
    Returns:                                                                                |
    -------                                                                                 |
        None : Fills in `out`                                                               |
                                                                                            |
    """                                                                                     |
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0                                  |
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0                                  |
    out_batch_stride = out_strides[0] if out_shape[0] > 1 else 0                            |
                                                                                            |
    # TODO: Implement for Task 3.2.                                                         |
    batch_size = out_shape[0]                                                               |
    m = out_shape[1]                                                                        |
    n = out_shape[2]                                                                        |
    k = a_shape[-1]  # shared dimension size                                                |
                                                                                            |
    # Parallelize over batches and rows of the output matrix                                |
    for batch in prange(batch_size):--------------------------------------------------------| #11
        for i in range(m):                                                                  |
            for j in range(n):                                                              |
                # Initialize the output position in `out` storage                           |
                out_idx = (                                                                 |
                    batch * out_batch_stride + i * out_strides[1] + j * out_strides[2]      |
                )                                                                           |
                out[out_idx] = 0  # Initialize accumulation to zero                         |
                                                                                            |
                # Compute dot product for a single element in the output matrix             |
                for p in range(k):                                                          |
                    # Calculate the positions in `a_storage` and `b_storage`                |
                    a_idx = batch * a_batch_stride + i * a_strides[1] + p * a_strides[2]    |
                    b_idx = batch * b_batch_stride + p * b_strides[1] + j * b_strides[2]    |
                                                                                            |
                    # Accumulate the product                                                |
                    out[out_idx] += a_storage[a_idx] * b_storage[b_idx]                     |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #11).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None